/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FlashBorrowerMock,
  FlashBorrowerMockInterface,
} from "../FlashBorrowerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC3156FlashLender",
        name: "lender_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum FlashBorrowerMock.Action",
        name: "key",
        type: "uint8",
      },
    ],
    name: "flashBorrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011ab380380620011ab833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b61107880620001336000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323e30c8b14610051578063dc4a790014610081578063f18d03cc1461009d578063f940e385146100b9575b600080fd5b61006b60048036038101906100669190610a22565b6100d5565b6040516100789190610cdf565b60405180910390f35b61009b60048036038101906100969190610ab4565b61035d565b005b6100b760048036038101906100b291906109bf565b6107a8565b005b6100d360048036038101906100ce9190610983565b61083f565b005b6000803073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610d61565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb90610d81565b60405180910390fd5b600084848101906101e59190610b2c565b905060006002811115610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600281111561025a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610288577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9915061034e565b600160028111156102c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156102fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610329577f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc31915061034d565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191505b5b81925050509695505050505050565b606060006002811115610399577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260028111156103d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104005760006040516020016103ea9190610d46565b60405160208183030381529060405290506104c5565b6001600281111561043a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115610473577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156104a157600160405160200161048b9190610d46565b60405160208183030381529060405290506104c4565b816040516020016104b29190610d46565b60405160208183030381529060405290505b5b60008473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e3060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610522929190610c48565b60206040518083038186803b15801561053a57600080fd5b505afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610b55565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9d98ce487876040518363ffffffff1660e01b81526004016105d2929190610cb6565b60206040518083038186803b1580156105ea57600080fd5b505afa1580156105fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106229190610b55565b9050600081866106329190610dce565b90508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838661067d9190610dce565b6040518363ffffffff1660e01b815260040161069a929190610cb6565b602060405180830381600087803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190610b03565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635cffe9de308989886040518563ffffffff1660e01b815260040161074c9493929190610cfa565b602060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e9190610b03565b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f18d03cc858585856040518563ffffffff1660e01b81526004016108079493929190610c71565b600060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f940e38583836040518363ffffffff1660e01b815260040161089a929190610c48565b600060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b505050505050565b6000813590506108df81610fed565b92915050565b6000815190506108f481611004565b92915050565b60008083601f84011261090c57600080fd5b8235905067ffffffffffffffff81111561092557600080fd5b60208301915083600182028301111561093d57600080fd5b9250929050565b6000813590506109538161101b565b92915050565b6000813590506109688161102b565b92915050565b60008151905061097d8161102b565b92915050565b6000806040838503121561099657600080fd5b60006109a4858286016108d0565b92505060206109b5858286016108d0565b9150509250929050565b600080600080608085870312156109d557600080fd5b60006109e3878288016108d0565b94505060206109f4878288016108d0565b9350506040610a05878288016108d0565b9250506060610a1687828801610959565b91505092959194509250565b60008060008060008060a08789031215610a3b57600080fd5b6000610a4989828a016108d0565b9650506020610a5a89828a016108d0565b9550506040610a6b89828a01610959565b9450506060610a7c89828a01610959565b935050608087013567ffffffffffffffff811115610a9957600080fd5b610aa589828a016108fa565b92509250509295509295509295565b600080600060608486031215610ac957600080fd5b6000610ad7868287016108d0565b9350506020610ae886828701610959565b9250506040610af986828701610944565b9150509250925092565b600060208284031215610b1557600080fd5b6000610b23848285016108e5565b91505092915050565b600060208284031215610b3e57600080fd5b6000610b4c84828501610944565b91505092915050565b600060208284031215610b6757600080fd5b6000610b758482850161096e565b91505092915050565b610b8781610e24565b82525050565b610b9681610e42565b82525050565b6000610ba782610da1565b610bb18185610dac565b9350610bc1818560208601610ebf565b610bca81610f50565b840191505092915050565b610bde81610e89565b82525050565b610bed81610ead565b82525050565b6000610c00602783610dbd565b9150610c0b82610f61565b604082019050919050565b6000610c23601f83610dbd565b9150610c2e82610fb0565b602082019050919050565b610c4281610e7f565b82525050565b6000604082019050610c5d6000830185610b7e565b610c6a6020830184610b7e565b9392505050565b6000608082019050610c866000830187610b7e565b610c936020830186610b7e565b610ca06040830185610b7e565b610cad6060830184610c39565b95945050505050565b6000604082019050610ccb6000830185610b7e565b610cd86020830184610c39565b9392505050565b6000602082019050610cf46000830184610b8d565b92915050565b6000608082019050610d0f6000830187610bd5565b610d1c6020830186610b7e565b610d296040830185610c39565b8181036060830152610d3b8184610b9c565b905095945050505050565b6000602082019050610d5b6000830184610be4565b92915050565b60006020820190508181036000830152610d7a81610bf3565b9050919050565b60006020820190508181036000830152610d9a81610c16565b9050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610dd982610e7f565b9150610de483610e7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1957610e18610ef2565b5b828201905092915050565b6000610e2f82610e5f565b9050919050565b60008115159050919050565b6000819050919050565b6000819050610e5a82610fd9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e9482610e9b565b9050919050565b6000610ea682610e5f565b9050919050565b6000610eb882610e4c565b9050919050565b60005b83811015610edd578082015181840152602081019050610ec2565b83811115610eec576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f466c617368426f72726f7765723a20556e74727573746564206c6f616e20696e60008201527f69746961746f7200000000000000000000000000000000000000000000000000602082015250565b7f466c617368426f72726f7765723a20556e74727573746564206c656e64657200600082015250565b60038110610fea57610fe9610f21565b5b50565b610ff681610e24565b811461100157600080fd5b50565b61100d81610e36565b811461101857600080fd5b50565b6003811061102857600080fd5b50565b61103481610e7f565b811461103f57600080fd5b5056fea264697066735822122078fb394fc268f4d65e71a97d02f06ca5f177758da4ccff102ff0fb78c7930b1164736f6c63430008040033";

export class FlashBorrowerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FlashBorrowerMock> {
    return super.deploy(lender_, overrides || {}) as Promise<FlashBorrowerMock>;
  }
  getDeployTransaction(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(lender_, overrides || {});
  }
  attach(address: string): FlashBorrowerMock {
    return super.attach(address) as FlashBorrowerMock;
  }
  connect(signer: Signer): FlashBorrowerMock__factory {
    return super.connect(signer) as FlashBorrowerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashBorrowerMockInterface {
    return new utils.Interface(_abi) as FlashBorrowerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlashBorrowerMock {
    return new Contract(address, _abi, signerOrProvider) as FlashBorrowerMock;
  }
}
