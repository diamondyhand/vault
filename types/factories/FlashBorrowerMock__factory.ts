/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FlashBorrowerMock,
  FlashBorrowerMockInterface,
} from "../FlashBorrowerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC3156FlashLender",
        name: "lender_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum FlashBorrowerMock.Action",
        name: "key",
        type: "uint8",
      },
    ],
    name: "flashBorrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001cb738038062001cb7833981810160405281019062000037919062000134565b6200006b7f21e62de8994ad7abd4b75080dc3721bd5553370b09ec8123b16bff5243e3c6cd60001b6200011a60201b60201c565b6200009f7fa0e0d61524746834123160c754b2028e34178342674ac38fe9ad292775b263cc60001b6200011a60201b60201c565b620000d37f4dd5b26b10bc47a9473780d6e386a7a306ed433b4e495b45e460a0e8754b3f3560001b6200011a60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001c2565b50565b6000815190506200012e81620001a8565b92915050565b6000602082840312156200014757600080fd5b600062000157848285016200011d565b91505092915050565b60006200016d8262000188565b9050919050565b6000620001818262000160565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001b38162000174565b8114620001bf57600080fd5b50565b611ae580620001d26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323e30c8b14610051578063dc4a790014610081578063f18d03cc1461009d578063f940e385146100b9575b600080fd5b61006b60048036038101906100669190611474565b6100d5565b6040516100789190611731565b60405180910390f35b61009b60048036038101906100969190611506565b61082e565b005b6100b760048036038101906100b29190611411565b6110ef565b005b6100d360048036038101906100ce91906113d5565b61120a565b005b60006101037f597b696f38421fcb0db749752c7d1377f2366c9588041a76b5f9dfd54e711f4d60001b61131f565b61012f7f90135279a4b1fd8f181853652f436b732ad0361afa2255a824afa0018908809d60001b61131f565b61015b7fb765fb3901e6b4cd2f9c3632021e2f281ca9566367b3d5da3ab20be5c7fd074360001b61131f565b60006101897f24d9a6267d4be23337fb6bf45cb09064a4cbdb54c884acddb5bc878813faae4c60001b61131f565b6101b57f874b6dd55f0214f52d9885dc41cbac49a78a7f16f0ac6f84165b22747f988e1c60001b61131f565b6101e17f78e130e1264301c91b9b7e2f76571d2bef630ab08f3f28a1663d9aa4dc7ed66860001b61131f565b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461024f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610246906117b3565b60405180910390fd5b61027b7fe3f711b0d1c04927709568a3a7b30b32a0927a64fd9c9e08134923e899a6d90260001b61131f565b6102a77f8d80e62d69582529f72a0f1bb2c0d8801be5077733bb40676158f19087b6f27d60001b61131f565b6102d37ffe75634a4f28b17784712c1ebdb068c4e45b573c42ab00bb400db21bb818f55b60001b61131f565b6102ff7f664eeb5685d5c815cd42c15cbd7fd7a2eab93e49879fb843ac42423debd5ab1060001b61131f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610384906117d3565b60405180910390fd5b6103b97f9988325f1dba6f0ce0b45e6c6cf3d705d5dc9af53cee6de33c80cfafc417d2ae60001b61131f565b6103e57f3838ff1f865d8485e8b8c53bc1f05e9e20cdcea8c0be0a265f4906593bdb00c260001b61131f565b6104117fb13e33b3083e7c124beb0f1995af51bfb6f2ea31cb3440e806b8aee5a267e39d60001b61131f565b60008484810190610422919061157e565b90506104507f278a046a77efe39e6cb0041f07eaad3b48ff327c0e1084504026572c1fc8348760001b61131f565b61047c7f9bd2744baaf9ae669e211e0a46a6a4554917da03876ac0618c486c50c367a5d260001b61131f565b600060028111156104b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156104ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156105a1576105217f7d857fb638558b6e05088302404e457b6b951fbe35cf339ea597b6442648e98a60001b61131f565b61054d7fae7f8b1533eaaa9976bb31126bedb4f9855b277d35f20e040bc417d0a5ec9e8360001b61131f565b6105797f81e4683696242efc7e366f13581c25c4f6cc04cf2702e46d4a8d5ff28368f1bb60001b61131f565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd991506107c7565b6105cd7fb3d5ad43d3815fb0c8c4e00f696ad40d2cde46434068d38da0e54192770e683660001b61131f565b6105f97f761326f258c95938eba63f8cf6de88222ad20a642cbb834d425ad1ca8efbd8ce60001b61131f565b60016002811115610633577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600281111561066c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561071e5761069e7fc75a3184cb4bcb48b94c5cd490a0325a61a7982bea4091a1d9578ab4b19bc82f60001b61131f565b6106ca7f4e4edc7c70bfc246cefcb806c3da6baa4b39a0b4d796b227b2c05a0df0e2acdf60001b61131f565b6106f67f128fdd264349eaad10eee2b4da72f53ee67fb098b293580f13d435f89be4de2460001b61131f565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191506107c6565b61074a7f8edcb6e30994e295e33c22f5f2905e7e01972caa9bfd74ab0a9dde04a98b4c4360001b61131f565b6107767fad778c5bfb645feb025c158a8c2b21113b32a42effc54bd532c83d219ba9d47660001b61131f565b6107a27f978c25990867cc9e0091251f4bbedabfa51929f6c7cc719acf58b5c75e102ea760001b61131f565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191505b5b6107f37f13cb9adc8f485c59f4033c43e65c6a05414a60f715cb56efc9b56f7fffd5074560001b61131f565b61081f7fa17f69706b56a6496c596b138301b7a3569dbefe287c3c770203fc5dfcc4524e60001b61131f565b81925050509695505050505050565b61085a7f792fcff12283c4ed27cb1c7d5766d94f1d9f68554f53fea0495c2e17834f320f60001b61131f565b6108867f6345e14b5eae969c826a472cfaaf4cfb8a35aa6697ab05c7825119878cc0a82260001b61131f565b6108b27f84b0585473acbb5dee53a2f4db60e23d6d31b6b03517d686c4c9d7b2d3fc943560001b61131f565b60606108e07fb6bca5c3a463ab3bb8b6f1fbff08cb91c0d2e332a56cfd16f8332ff60656b6f160001b61131f565b61090c7f62abefbcc5b21a9b086cadbc2f13e152c5d8710a85d28a1160f0996a92ef9cc060001b61131f565b60006002811115610946577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600281111561097f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a31576109b17f7fa48227f076d5f5515f02b760e1eb8756704dcb8ebbd100f8e25e88c72deda960001b61131f565b6109dd7f3ab8838940efbf3d3bfcd4ed92ff0f2216fba581bf2b2e07dc52b12dfc469b1960001b61131f565b610a097f9ecb4fa533b408baad49ad95f71393c5de9dc87585da25aadbef89c351aa2bcf60001b61131f565b6000604051602001610a1b9190611798565b6040516020818303038152906040529050610c56565b610a5d7f954d6a21046021d44ae3fc6fdd01a7f6b8978ab91b134573094ebf6a3823a25a60001b61131f565b610a897f0925bfde22399e3037cee54d76691ffe0c76f577dc06c73f2db8d8519274527e60001b61131f565b60016002811115610ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115610afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610bae57610b2e7fa3189527f0e12eca02cd17956dfb41fc27ff7bb0dd780422757a12b293442e3860001b61131f565b610b5a7fa9d871e4c42c0f6e9106220e2c6991f1db5bd2a04df4e1fb3bf7740be6cfbedf60001b61131f565b610b867f38ec7b468de95238baf7ea82f124d3144d3a8655b3e160e090c31837fb08a66f60001b61131f565b6001604051602001610b989190611798565b6040516020818303038152906040529050610c55565b610bda7f13a01a95b750094b98f1ecab75db25335f548294108264a91c52afe6a41c574e60001b61131f565b610c067f742ecbaffd8f6557160762d6ccde294d91ba06d640736936c0f48a6509661db160001b61131f565b610c327fb0fd352ddc1562e6dbd16970dcfdea2c84ffa1a9b7d5b3f00d3c0492469de5b360001b61131f565b81604051602001610c439190611798565b60405160208183030381529060405290505b5b610c827f031fd6c38e845b1b68c367301cc8290891e731b7e135c95e68bf3f0b86e1f99860001b61131f565b610cae7f53844a6eb2196359c2632afc4cd098fbae1dfbd401b0f2f405ee2ed82c0d75b460001b61131f565b60008473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e3060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610d0b92919061169a565b60206040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b91906115a7565b9050610d897fd4dbb79fc2f7fe1019602ece2e029012a66828b0b24fa44329a011c8c8c8d58b60001b61131f565b610db57fc5595d7a9a171ac534019f4a0c1600a2f1c29de146404ac7fa25b9986e1ea84b60001b61131f565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7af467a866040518263ffffffff1660e01b8152600401610e1191906117f3565b60206040518083038186803b158015610e2957600080fd5b505afa158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6191906115a7565b9050610e8f7f780a0c225689386080f9f4b6202c2417674e172770008a1a5b4b37a9ccc6cf4a60001b61131f565b610ebb7fc69247eca01a76dea4076e687251b3863077ad57330bde3a975a904e314d4c7e60001b61131f565b60008186610ec9919061183b565b9050610ef77fee97b4e6f4e53c78dfbba75b40078c26ed0ff3d44c683cb1b08d35ceeee0a96160001b61131f565b610f237faf217bfe2f9e96bb10c25e43898069ae313fa8bffb840f519e1633aaf13a3e0460001b61131f565b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168386610f6c919061183b565b6040518363ffffffff1660e01b8152600401610f89929190611708565b602060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611555565b506110087fcd157391af660201e9067c0d3f885085959332ddb85e5d4d5889be0add82da5560001b61131f565b6110347f16bb3747655b64b6a154972502fc3c2db95c6b5e899ea178784b6974d55f218660001b61131f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635cffe9de308989886040518563ffffffff1660e01b8152600401611093949392919061174c565b602060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e59190611555565b5050505050505050565b61111b7f9cb6d77bea625f9410631c4d14337af4a3d0a907549060f70c685e48b4b2e41760001b61131f565b6111477f7dcf2cffcb90fb5683bb40b17c5898be2e0ade05b47142f64f38ea7e6708ed4d60001b61131f565b6111737f921c47917921c2fa48f8c4b2ffe79cc3fc12900b22334f25cddc725d0f8e3f6760001b61131f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f18d03cc858585856040518563ffffffff1660e01b81526004016111d294939291906116c3565b600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b5050505050505050565b6112367fcb959604cc03f51f2268cbd3a0e3404dc422b5012f17e7406b6afebd651b907b60001b61131f565b6112627f7d65b47634efe4f48aee7bf807f81be129a810daf9f4af59433ae10cec6803d860001b61131f565b61128e7f8a6219f695ea41dba953b3ec8bbca76733e09eb369fb539ed6f55e1fc10597e260001b61131f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f940e38583836040518363ffffffff1660e01b81526004016112e992919061169a565b600060405180830381600087803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b505050505050565b50565b60008135905061133181611a5a565b92915050565b60008151905061134681611a71565b92915050565b60008083601f84011261135e57600080fd5b8235905067ffffffffffffffff81111561137757600080fd5b60208301915083600182028301111561138f57600080fd5b9250929050565b6000813590506113a581611a88565b92915050565b6000813590506113ba81611a98565b92915050565b6000815190506113cf81611a98565b92915050565b600080604083850312156113e857600080fd5b60006113f685828601611322565b925050602061140785828601611322565b9150509250929050565b6000806000806080858703121561142757600080fd5b600061143587828801611322565b945050602061144687828801611322565b935050604061145787828801611322565b9250506060611468878288016113ab565b91505092959194509250565b60008060008060008060a0878903121561148d57600080fd5b600061149b89828a01611322565b96505060206114ac89828a01611322565b95505060406114bd89828a016113ab565b94505060606114ce89828a016113ab565b935050608087013567ffffffffffffffff8111156114eb57600080fd5b6114f789828a0161134c565b92509250509295509295509295565b60008060006060848603121561151b57600080fd5b600061152986828701611322565b935050602061153a868287016113ab565b925050604061154b86828701611396565b9150509250925092565b60006020828403121561156757600080fd5b600061157584828501611337565b91505092915050565b60006020828403121561159057600080fd5b600061159e84828501611396565b91505092915050565b6000602082840312156115b957600080fd5b60006115c7848285016113c0565b91505092915050565b6115d981611891565b82525050565b6115e8816118af565b82525050565b60006115f98261180e565b6116038185611819565b935061161381856020860161192c565b61161c816119bd565b840191505092915050565b611630816118f6565b82525050565b61163f8161191a565b82525050565b600061165260278361182a565b915061165d826119ce565b604082019050919050565b6000611675601f8361182a565b915061168082611a1d565b602082019050919050565b611694816118ec565b82525050565b60006040820190506116af60008301856115d0565b6116bc60208301846115d0565b9392505050565b60006080820190506116d860008301876115d0565b6116e560208301866115d0565b6116f260408301856115d0565b6116ff606083018461168b565b95945050505050565b600060408201905061171d60008301856115d0565b61172a602083018461168b565b9392505050565b600060208201905061174660008301846115df565b92915050565b60006080820190506117616000830187611627565b61176e60208301866115d0565b61177b604083018561168b565b818103606083015261178d81846115ee565b905095945050505050565b60006020820190506117ad6000830184611636565b92915050565b600060208201905081810360008301526117cc81611645565b9050919050565b600060208201905081810360008301526117ec81611668565b9050919050565b6000602082019050611808600083018461168b565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611846826118ec565b9150611851836118ec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118865761188561195f565b5b828201905092915050565b600061189c826118cc565b9050919050565b60008115159050919050565b6000819050919050565b60008190506118c782611a46565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061190182611908565b9050919050565b6000611913826118cc565b9050919050565b6000611925826118b9565b9050919050565b60005b8381101561194a57808201518184015260208101905061192f565b83811115611959576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f466c617368426f72726f7765723a20556e74727573746564206c6f616e20696e60008201527f69746961746f7200000000000000000000000000000000000000000000000000602082015250565b7f466c617368426f72726f7765723a20556e74727573746564206c656e64657200600082015250565b60038110611a5757611a5661198e565b5b50565b611a6381611891565b8114611a6e57600080fd5b50565b611a7a816118a3565b8114611a8557600080fd5b50565b60038110611a9557600080fd5b50565b611aa1816118ec565b8114611aac57600080fd5b5056fea26469706673582212208db05b63feb2cc53f67aea0549ce0b1e08c4baf8526a07a7c6103192be52335a64736f6c63430008040033";

export class FlashBorrowerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FlashBorrowerMock> {
    return super.deploy(lender_, overrides || {}) as Promise<FlashBorrowerMock>;
  }
  getDeployTransaction(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(lender_, overrides || {});
  }
  attach(address: string): FlashBorrowerMock {
    return super.attach(address) as FlashBorrowerMock;
  }
  connect(signer: Signer): FlashBorrowerMock__factory {
    return super.connect(signer) as FlashBorrowerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashBorrowerMockInterface {
    return new utils.Interface(_abi) as FlashBorrowerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlashBorrowerMock {
    return new Contract(address, _abi, signerOrProvider) as FlashBorrowerMock;
  }
}
